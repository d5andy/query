comp
(comp)
(boot jar)
(boot (jar))
exit
(doc cljs)
exit
(use 'clojure.pprint)
(use 'net.cgrand.enlive-html)
(def herd (html-resource "jcrit/views/herd_changes.html"))
(def herd (html-resource "resources/html/table.html"))
(def herd (html-resource "./resources/html/table.html"))
(def herd (html-resource "resources/html/table.html"))
(def herd (html-resource "./resources/html/table.html"))
(doc html-resource)
(def herd (html-resource "~/project/d5andy/query/resources/html/table.html"))
pwd
(pwd)
?
(help)
boot
dev
(dev)
(html-resource "resources/html/index.html")
(html-resource "html/table.html")
(def tableh (html-resource "html/table.html"))
(select tableh [:tr#bookmark])
(select tableh [:tr.bookmark])
(select tableh [:tr#bookmark])
(select tableh [:td#bookmark])
(select tableh [:tr.bookmark])
(transform tableh [:tr.bookmark] (clone-for [row '("one", "two")]))
(transform tableh [:tr.bookmark] (clone-for [row '("one", "two")] identity))
(transform tableh [:tr.bookmark] (clone-for [row '("one", "two")] (do-> [:td.title] (content row)))
)
(transform tableh [:tr.bookmark] (clone-for [row '("one", "two")]  [:td.title] (content row)))
(transform tableh [:tr.bookmark] (clone-for [row '("one", "two")]  [:td.title] (content row) [:td.row] (content row)))
(transform tableh [:tr.bookmark] (clone-for [[title row] '({:title "one" :row "row_one"})]  [:td.title] (content row) [:td.row] (content row)))
(transform tableh [:tr.bookmark] (clone-for [[title row] [{:title "one" :row "row_one"}]]  [:td.title] (content row) [:td.row] (content row)))
(transform tableh [:tr.bookmark] (clone-for [[title row] [["one" "row_one"]]]  [:td.title] (content row) [:td.row] (content row)))
exit
({:title SQLite Example, :url http://example.com})
'({:title SQLite Example, :url http://example.com})
(println '({:title SQLite Example, :url http://example.com}))
(println '({:title "SQLite Example", :url "http://example.com"}))
(nth 1 '({:title "SQLite Example", :url "http://example.com"}))
(nth '({:title "SQLite Example", :url "http://example.com"}) 1)
(nth '({:title "SQLite Example", :url "http://example.com"}) 0)
([{title :title url :url}] '({:title "SQLite Example", :url "http://example.com"}) )
(let [{title :title url :url}  '({:title "SQLite Example", :url "http://example.com"})] (println title + " " + url ) )
(let [[{title :title url :url]} '({:title "SQLite Example", :url "http://example.com"})] (println title + " " + url ) )
(let [[{title :title url :url}] '({:title "SQLite Example", :url "http://example.com"})] (println title + " " + url ) )
(let [[{title :title row :url}] '({:title "SQLite Example", :url "http://example.com"})] (println title + " " + row ) )
(let [[{title :title row :url}] '({:title "SQLite Example" :url "http://example.com"})] (println title + " " + row ) )
(let [[{title :title row :url}] '({:title "SQLite Example" :url "http://example.com"})] (println title " " row ) )
(let [[{title :title row :url}] '({:title "SQLite Example" :url "http://example.com"})] (println title "@" row ) )
exit
(def herd (html-resource "html/index.html"))
(use 'clojure.pprint)
(use 'net.cgrand.enlive-html)
(def herd (html-resource "html/index.html"))
(select herd ":div.h2")
(select tableh [:div.h2])
(select herd [:div.h2])
(select herd [:div.app])
(select herd [:div])
(select herd [:div#app])
(select herd [:div#app .h2])
(select herd [:div#app.h2])
(select herd [:div#app])
(select herd [:div#app:h2:content])
(select herd [:div#app:h2])
(select herd [:h2])
(content herd [:h2])
exit
